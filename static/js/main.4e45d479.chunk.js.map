{"version":3,"sources":["util/language-key.js","App.js","serviceWorker.js","index.js"],"names":["TRAILING_PUNCTUATION_REGEX","replaceAmpersand","languageKey","replace","replaceHash","replaceSpaces","replaceVariables","removeSpecialChars","removeTrailingPunctuation","toLanguageKey","flow","toLower","trim","App","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_clipboard","Clipboard","handleCapitalizationChange","bind","assertThisInitialized","handleChange","handleToggleAuto","handleToggleCase","state","autoTitleCase","capitalizationRule","titleCase","value","destroy","event","target","setState","_this$state","keys","split","compact","map","key","retVal","match","title","concat","copyData","createKeys","react_default","a","createElement","className","Grid","Row","Col","PageHeader","md","Panel","Body","FormGroup","controlId","ControlLabel","ButtonToolbar","ToggleButtonGroup","defaultValue","name","onChange","ToggleButton","FormControl","componentClass","placeholder","type","bsSize","Button","data-clipboard-text","join","val","i","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e45d479.chunk.js","sourcesContent":["import title from 'title';\nimport {flow, toLower, trim} from 'lodash/fp';\n\nconst TRAILING_PUNCTUATION_REGEX = /([.!?]+$)/gi;\n\n/**\n * Auto capitalize titles if its not a sentence.\n */\nexport function capitalizeTitle(languageKey) {\n  if (languageKey.match(TRAILING_PUNCTUATION_REGEX)) {\n    return languageKey;\n  }\n\n  return title(languageKey);\n}\n\n/**\n * Replaces ampersand \"&\" with \"and\".\n */\nexport function replaceAmpersand(languageKey) {\n  return languageKey.replace(/&/gi, 'and');\n}\n\n/**\n * Replaces hash \"#\" with \"num\".\n */\nexport function replaceHash(languageKey) {\n  return languageKey.replace(/#/gi, 'num');\n}\n\n/**\n * Replace spaces with \"-\".\n */\nexport function replaceSpaces(languageKey) {\n  return languageKey.replace(/\\s/gi, '-');\n}\n\n/**\n * Replaces variable markers \"{0}\" with \"x\".\n */\nexport function replaceVariables(languageKey) {\n  return languageKey.replace(/({\\d+})/gi, 'x');\n}\n\n/**\n * Remove the following special characters: \", \\, /, :, (, ), %, *\n */\nexport function removeSpecialChars(languageKey) {\n  return languageKey.replace(/([\"\\\\/:()%*])/gi, '');\n}\n\n/**\n * Remove trailing punctuation.\n */\nexport function removeTrailingPunctuation(languageKey) {\n  return languageKey.replace(TRAILING_PUNCTUATION_REGEX, '');\n}\n\n/**\n * Creates an array from a string separated by new lines.\n * @param {string} languageKeys - A string of keys separated by new lines.\n * @returns {Array}\n */\nexport function splitKeys(languageKeys) {\n  return languageKeys.split(/\\n/gi);\n}\n\n/**\n * Format a String to a language key.\n */\nexport function toLanguageKey(languageKey) {\n  return flow(\n    toLower,\n    trim,\n    removeSpecialChars,\n    replaceAmpersand,\n    replaceHash,\n    replaceSpaces,\n    replaceVariables,\n    removeTrailingPunctuation,\n  )(languageKey);\n}\n","import './App.css';\nimport Clipboard from 'clipboard';\nimport React, {Component} from 'react';\nimport title from 'title';\nimport {\n  Button,\n  ButtonToolbar,\n  Col,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Grid,\n  PageHeader,\n  Panel,\n  Row,\n  ToggleButton,\n  ToggleButtonGroup,\n} from 'react-bootstrap';\nimport {capitalizeTitle, splitKeys, toLanguageKey} from './util/language-key';\nimport {compact} from 'lodash';\n\nexport default class App extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this._clipboard = new Clipboard('[data-clipboard-text]');\n\n    this.handleCapitalizationChange = this.handleCapitalizationChange.bind(\n      this,\n    );\n    this.handleChange = this.handleChange.bind(this);\n    this.handleToggleAuto = this.handleToggleAuto.bind(this);\n    this.handleToggleCase = this.handleToggleCase.bind(this);\n\n    this.state = {\n      autoTitleCase: true,\n      capitalizationRule: 'titles',\n      languageKey: '',\n      titleCase: false,\n      value: '',\n    };\n  }\n\n  componentWillUnmount() {\n    this._clipboard.destroy();\n  }\n\n  handleChange(event) {\n    const {value} = event.target;\n\n    this.setState({\n      languageKey: toLanguageKey(value),\n      value,\n    });\n  }\n\n  handleToggleAuto() {\n    const {autoTitleCase} = this.state;\n\n    this.setState({\n      autoTitleCase: !autoTitleCase,\n    });\n  }\n\n  handleToggleCase() {\n    const {titleCase} = this.state;\n\n    this.setState({\n      titleCase: !titleCase,\n    });\n  }\n\n  handleCapitalizationChange(capitalizationRule) {\n    this.setState({\n      capitalizationRule,\n    });\n  }\n\n  createKeys() {\n    const {capitalizationRule, value} = this.state;\n\n    const keys = splitKeys(value);\n\n    return compact(keys).map(key => {\n      let retVal = key;\n\n      if (capitalizationRule === 'titles') {\n        retVal = capitalizeTitle(retVal);\n      } else if (capitalizationRule === 'all') {\n        retVal = title(retVal);\n      }\n\n      return `${toLanguageKey(key)}=${retVal}`;\n    });\n  }\n\n  render() {\n    const {value} = this.state;\n\n    const copyData = this.createKeys();\n\n    return (\n      <div className=\"App\">\n        <Grid>\n          <Row>\n            <Col>\n              <PageHeader>{'Language Key Creator'}</PageHeader>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md={6}>\n              <Panel>\n                <Panel.Body>\n                  <form>\n                    <FormGroup controlId=\"formBasicText\">\n                      <ControlLabel>{'Input'}</ControlLabel>\n\n                      <ButtonToolbar>\n                        <ToggleButtonGroup\n                          defaultValue=\"titles\"\n                          name=\"test\"\n                          onChange={this.handleCapitalizationChange}>\n                          <ToggleButton value=\"all\">\n                            {'Capitalize All'}\n                          </ToggleButton>\n                          <ToggleButton value=\"titles\">\n                            {'Capitalize Titles'}\n                          </ToggleButton>\n                          <ToggleButton value=\"none\">\n                            {'Capitalize None'}\n                          </ToggleButton>\n                        </ToggleButtonGroup>\n                      </ButtonToolbar>\n\n                      <FormControl\n                        componentClass=\"textarea\"\n                        placeholder=\"Enter String\"\n                        onChange={this.handleChange}\n                        type=\"textarea\"\n                        value={value}\n                      />\n                    </FormGroup>\n                  </form>\n                </Panel.Body>\n              </Panel>\n            </Col>\n\n            <Col md={6}>\n              <Panel bsSize=\"large\">\n                <Panel.Body>\n                  <ControlLabel>{'Output'}</ControlLabel>\n\n                  <ButtonToolbar>\n                    <Button data-clipboard-text={copyData.join('\\n')}>\n                      {'Copy Pair'}\n                    </Button>\n                  </ButtonToolbar>\n\n                  <div className=\"output\">\n                    {value &&\n                      copyData.map((val, i) => {\n                        return (\n                          <div className=\"language-key-full\" key={i}>\n                            {val}\n                          </div>\n                        );\n                      })}\n                  </div>\n                </Panel.Body>\n              </Panel>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}